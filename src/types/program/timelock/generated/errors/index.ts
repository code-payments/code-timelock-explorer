/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidTimeLockState: 'Invalid timelock state for this instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTimeLockStateError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidTimeLockState'
  constructor() {
    super('Invalid timelock state for this instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTimeLockStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidTimeLockStateError())
createErrorFromNameLookup.set(
  'InvalidTimeLockState',
  () => new InvalidTimeLockStateError()
)

/**
 * InvalidTimeLockDuration: 'Invalid timelock duration provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTimeLockDurationError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidTimeLockDuration'
  constructor() {
    super('Invalid timelock duration provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTimeLockDurationError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidTimeLockDurationError())
createErrorFromNameLookup.set(
  'InvalidTimeLockDuration',
  () => new InvalidTimeLockDurationError()
)

/**
 * InvalidVaultAccount: 'Invalid vault account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVaultAccountError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidVaultAccount'
  constructor() {
    super('Invalid vault account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVaultAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidVaultAccountError())
createErrorFromNameLookup.set(
  'InvalidVaultAccount',
  () => new InvalidVaultAccountError()
)

/**
 * InsufficientTimeElapsed: 'The timelock period has not yet been reached'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientTimeElapsedError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InsufficientTimeElapsed'
  constructor() {
    super('The timelock period has not yet been reached')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientTimeElapsedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InsufficientTimeElapsedError())
createErrorFromNameLookup.set(
  'InsufficientTimeElapsed',
  () => new InsufficientTimeElapsedError()
)

/**
 * InsufficientVaultBalance: 'Insufficient vault funds'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientVaultBalanceError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InsufficientVaultBalance'
  constructor() {
    super('Insufficient vault funds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientVaultBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InsufficientVaultBalanceError())
createErrorFromNameLookup.set(
  'InsufficientVaultBalance',
  () => new InsufficientVaultBalanceError()
)

/**
 * InvalidTimeAuthority: 'Invalid time authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTimeAuthorityError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidTimeAuthority'
  constructor() {
    super('Invalid time authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTimeAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidTimeAuthorityError())
createErrorFromNameLookup.set(
  'InvalidTimeAuthority',
  () => new InvalidTimeAuthorityError()
)

/**
 * InvalidVaultOwner: 'Invalid vault owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVaultOwnerError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidVaultOwner'
  constructor() {
    super('Invalid vault owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVaultOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidVaultOwnerError())
createErrorFromNameLookup.set(
  'InvalidVaultOwner',
  () => new InvalidVaultOwnerError()
)

/**
 * InvalidCloseAuthority: 'Invalid close authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCloseAuthorityError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidCloseAuthority'
  constructor() {
    super('Invalid close authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCloseAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidCloseAuthorityError())
createErrorFromNameLookup.set(
  'InvalidCloseAuthority',
  () => new InvalidCloseAuthorityError()
)

/**
 * NonZeroTokenBalance: 'Invalid token balance. Token balance must be zero.'
 *
 * @category Errors
 * @category generated
 */
export class NonZeroTokenBalanceError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'NonZeroTokenBalance'
  constructor() {
    super('Invalid token balance. Token balance must be zero.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NonZeroTokenBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new NonZeroTokenBalanceError())
createErrorFromNameLookup.set(
  'NonZeroTokenBalance',
  () => new NonZeroTokenBalanceError()
)

/**
 * InvalidDustBurn: 'Invalid dust burn.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDustBurnError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidDustBurn'
  constructor() {
    super('Invalid dust burn.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDustBurnError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidDustBurnError())
createErrorFromNameLookup.set(
  'InvalidDustBurn',
  () => new InvalidDustBurnError()
)

/**
 * InvalidTokenMint: 'Invalid token mint.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenMintError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidTokenMint'
  constructor() {
    super('Invalid token mint.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidTokenMintError())
createErrorFromNameLookup.set(
  'InvalidTokenMint',
  () => new InvalidTokenMintError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
