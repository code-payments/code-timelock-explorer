/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { DataVersion, dataVersionBeet } from '../types/DataVersion'
import { TimeLockState, timeLockStateBeet } from '../types/TimeLockState'

/**
 * Arguments used to create {@link TimeLockAccount}
 * @category Accounts
 * @category generated
 */
export type TimeLockAccountArgs = {
  dataVersion: DataVersion
  timeAuthority: web3.PublicKey
  closeAuthority: web3.PublicKey
  mint: web3.PublicKey
  vault: web3.PublicKey
  vaultBump: number
  vaultState: TimeLockState
  vaultOwner: web3.PublicKey
  unlockAt: beet.COption<beet.bignum>
  numDaysLocked: number
}

const timeLockAccountDiscriminator = [112, 63, 106, 231, 182, 101, 88, 158]
/**
 * Holds the data for the {@link TimeLockAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class TimeLockAccount implements TimeLockAccountArgs {
  private constructor(
    readonly dataVersion: DataVersion,
    readonly timeAuthority: web3.PublicKey,
    readonly closeAuthority: web3.PublicKey,
    readonly mint: web3.PublicKey,
    readonly vault: web3.PublicKey,
    readonly vaultBump: number,
    readonly vaultState: TimeLockState,
    readonly vaultOwner: web3.PublicKey,
    readonly unlockAt: beet.COption<beet.bignum>,
    readonly numDaysLocked: number
  ) {}

  /**
   * Creates a {@link TimeLockAccount} instance from the provided args.
   */
  static fromArgs(args: TimeLockAccountArgs) {
    return new TimeLockAccount(
      args.dataVersion,
      args.timeAuthority,
      args.closeAuthority,
      args.mint,
      args.vault,
      args.vaultBump,
      args.vaultState,
      args.vaultOwner,
      args.unlockAt,
      args.numDaysLocked
    )
  }

  /**
   * Deserializes the {@link TimeLockAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [TimeLockAccount, number] {
    return TimeLockAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link TimeLockAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<TimeLockAccount> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find TimeLockAccount account at ${address}`)
    }
    return TimeLockAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link TimeLockAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [TimeLockAccount, number] {
    return timeLockAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link TimeLockAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return timeLockAccountBeet.serialize({
      accountDiscriminator: timeLockAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link TimeLockAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: TimeLockAccountArgs) {
    const instance = TimeLockAccount.fromArgs(args)
    return timeLockAccountBeet.toFixedFromValue({
      accountDiscriminator: timeLockAccountDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link TimeLockAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: TimeLockAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      TimeLockAccount.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link TimeLockAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      dataVersion: 'DataVersion.' + DataVersion[this.dataVersion],
      timeAuthority: this.timeAuthority.toBase58(),
      closeAuthority: this.closeAuthority.toBase58(),
      mint: this.mint.toBase58(),
      vault: this.vault.toBase58(),
      vaultBump: this.vaultBump,
      vaultState: 'TimeLockState.' + TimeLockState[this.vaultState],
      vaultOwner: this.vaultOwner.toBase58(),
      unlockAt: this.unlockAt,
      numDaysLocked: this.numDaysLocked,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const timeLockAccountBeet = new beet.FixableBeetStruct<
  TimeLockAccount,
  TimeLockAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['dataVersion', dataVersionBeet],
    ['timeAuthority', beetSolana.publicKey],
    ['closeAuthority', beetSolana.publicKey],
    ['mint', beetSolana.publicKey],
    ['vault', beetSolana.publicKey],
    ['vaultBump', beet.u8],
    ['vaultState', timeLockStateBeet],
    ['vaultOwner', beetSolana.publicKey],
    ['unlockAt', beet.coption(beet.i64)],
    ['numDaysLocked', beet.u8],
  ],
  TimeLockAccount.fromArgs,
  'TimeLockAccount'
)
